{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"1de9f241e1cf2ad4da93","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>要做一件事，首先要有一个大体的脉络。</p>\n<p>对于一个程序员来说，大致有三个层面的能力需要提升。</p>\n<p>1.编程能力</p>\n<p>2.架构能力</p>\n<p>3.工程能力</p>\n<h3>编程能力</h3>\n<p>在编程能力这个阶段，是不分前端与后端的。因为不论是前端程序员也好，还是后端程序员也好，都属于程序员，程序员该会的，都应该会。</p>\n<p>这部分的知识点很多，知识体系也很庞大。这里罗列一些重要的核心部分。</p>\n<h4>招式</h4>\n<h5>编程语言</h5>\n<p>编程语言就像基础招式，基础招式练不好，很影响发挥。后端可能会使用C、C++、node.js或者Java等等。前端一定会使用JavaScript。招式一定要练好，这样才显得像一个程序员。但是，招式练得再好，也没办法成为顶级高手。</p>\n<h5>框架</h5>\n<p>框架是基于编程语言上的提升，是高级招式。框架有很多，针对不同编程语言，不同场景下，都有不同的框架，如java的spring、nodejs的express、python的django、前端的react、vue等。框架用的好，就能提高编程效率。</p>\n<h4>内功</h4>\n<h5>数据结构与算法</h5>\n<p>数据结构与算法是比较实用的内功。掌握了数据结构与算法，直接就影响了编程语言的威力。所谓的性能，几乎都是由数据结构与算法决定的。</p>\n<h5>编译原理</h5>\n<p>编译原理简单来说就是将编程语言转换成计算机语言。</p>\n<h5>操作系统</h5>\n<p>操作系统很多样化，有用户常用的windows、mac os；也有常用于服务器的linux；还有很多移动端系统，如android、ios等。</p>\n<p>因为linux的一些特性，我们的程序往往都会部署到linux系统上。所以一定要理解linux的原理。</p>\n<h5>计算机工作原理</h5>\n<p>计算机工作原理是万物之源。</p>\n<h5>浏览器工作原理</h5>\n<p>浏览器的意义是解决了跨平台，操作系统之上的操作系统。</p>\n<h5>网络协议</h5>\n<p>网络协议</p>\n<h3>架构能力</h3>\n<p>一个应用就像一座大厦，</p>\n<p>基础架构</p>\n<p>很多种中间件</p>\n<p>如数据库中间件 mysql</p>\n<p>容器中间件 nginx</p>\n<p>业务架构</p>\n<p>工程能力</p>","id":"45fea9fc-6199-5dfb-9abe-ee23d5fe55be","frontmatter":{"date":"2019年8月17日","title":"程序员成长","description":"程序员成长是一个永恒的话题。那么程序员到底该往哪些方向成长呢？如何成长呢？"},"fields":{"slug":"/programmer-growth/"}}},{"node":{"html":"<h4>为什么需要Web Components？</h4>\n<p>随着Web应用的发展，出现了越来越多的复杂大型Web应用。为了提高开发效率和维护性。最好的解决方案就是组件化。最主流的框架，诸如React、Vue、Angular等，都是组件化框架。可以说，Web Components是前端发展的主要方向之一。</p>\n<h4>Web Components的优点？</h4>\n<p>最大的优点就是原生支持，无需任何框架支撑，即写即用。</p>\n<h4>Web Components是否可以应用于实际项目中？</h4>\n<p>要看目标群体是怎样的。原生的写法仅支持较新版本的Chrome、FireFox、Safari和Opear。IE是不支持的。</p>\n<h4>使用Web Components的场景？</h4>\n<p>由于Web Component目前还处于发展阶段，API并不是很完善和稳定。我们大多数情况下有更好的选择，如各大框架，React、Vue、Angular、Polymer等。所以，目前来说，使用WebComponents的最佳场景是在不能使用框架的情况下。比如在老旧的项目中、前后端未分离的开发模式下，只能使用后端模板引擎将页面渲染出来的场景。</p>\n<h4>Web Components的几个核心概念</h4>\n<ul>\n<li>自定义元素 Custom elements</li>\n<li>影子DOM Shadow DOM</li>\n<li>HTML模板 HTML templates</li>\n</ul>\n<h4>准备开发环境</h4>\n<p>前面我们提到，Web Components是原生支持的，所以开发不需要任何的环境。只需要创建如下目录结构即可。</p>\n<p><img src=\"..%5Cimages%5Carticle%5C1565830691447.png\" alt=\"1565830691447\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-src\n|- components\n-index.html</code></pre></div>\n<h4>创建自定义元素</h4>\n<p>自定义元素的名命需要遵循规则，必须使用中横线名命，这样的目的是为了与原生标签区分。</p>\n<p>假设我们需要一个按钮组件，名命为 i-button。</p>\n<p>创建自定义元素的方式有两种，一种是函数，一种是类。但无论哪种方式创建的自定义元素，都必须继承HTMLElement。</p>\n<p>下面我们先看一下类是如何实现的：在src/components目录下创建i-button.js文件，写创建一个 IButton 类。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后调用 customElements.define 方法注册自定义元素。这个方法的作用是将自定义元素名与对应的类进行绑定。当HTML解析遇到注册过的自定义元素时，会去调用对应的类创建实例，创建出的实例会替换到HTML中自定义元素的位置。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i-button\"</span><span class=\"token punctuation\">,</span> IButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样就可以使用 <code class=\"language-text\">i-button</code> 这个自定义元素了。所有的 <code class=\"language-text\">i-button</code> 元素都将会是 <code class=\"language-text\">IButton</code> 的实例。</p>\n<h4>给自定义元素添加内容</h4>\n<p>由于元素 <code class=\"language-text\">i-button</code> 就是类 <code class=\"language-text\">IButton</code> 的实例，那么 <code class=\"language-text\">IButton</code> 内的 <code class=\"language-text\">this</code> 就指向 <code class=\"language-text\">i-button</code> 元素本身。</p>\n<p>我们使用 <code class=\"language-text\">append</code> 添加一个按钮元素。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我是一个按钮</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>HTML中使用自定义元素</h4>\n<p>在index.html中写入以下内容。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Parcel Sandbox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i-button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i-button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./src/components/i-button.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这样在浏览器中打开就能看到一个对应的按钮。<img src=\"C:%5CUsers%5C15753%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565799119881.png\" alt=\"1565799119881\"></p>\n<p>这样就实现了一个最简单的组件，我们可以美化一下这个按钮，添加一些style。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我是一个按钮</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"style\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    style<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      button {\n        padding: 0.5em 0.7em;\n        background-color:  rgb(64, 169, 243); \n        color: white;\n        border: none;\n        border-radius: 4px;\n        outline: none;\n      }\n      button:hover {\n        background-color: rgb(102, 185, 244);\n      }\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span> button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这是看到的效果是这样的。<img src=\"C:%5CUsers%5C15753%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565831268795.png\" alt=\"1565831268795\"></p>\n<p>我们可以在任何一个HTML文件中导入这个JavaScript文件，并使用<code class=\"language-text\">&lt;i-button&gt;&lt;/i-button&gt;</code>来复用它。</p>\n<h4>Template 模板元素</h4>\n<p>目前还存在一些问题。比如，使用document.createElement和document.createTextNode来创建元素，在页面复杂的情况下，会很繁琐。</p>\n<p>React的解决方案是使用JSX语法糖，Vue的解决方案是使用模板。</p>\n<p>原生的解决方案是使用<code class=\"language-text\">&lt;template&gt;</code>标签。</p>\n<p>在html文件中添加template标签。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>i-button-template<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 600<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.5em 0.7em<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>64<span class=\"token punctuation\">,</span> 169<span class=\"token punctuation\">,</span> 243<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 2px solid <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>102<span class=\"token punctuation\">,</span> 185<span class=\"token punctuation\">,</span> 244<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\">button:hover</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>102<span class=\"token punctuation\">,</span> 185<span class=\"token punctuation\">,</span> 244<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>我是一个按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>将对应的class也改造一下。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> templateEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i-button-template\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> templateEl<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样做的效果与之前的代码效果几乎相同。</p>\n<p>template标签并不会被浏览器解析，它只当作模板使用。</p>\n<p>template.content是获取template元素，Node.cloneNode方法可以克隆元素内的节点。最后的参数true表示深度克隆，这样将会把template元素内所有的节点全部克隆。</p>\n<p>但这样HTML就会很庞大。此时最佳的解决方案就是innerHTML。我们可以把html中的template元素内容放到IButton类中，改造成这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> templateEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"template\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    templateEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;style>\n        button {\n            font-weight: 600;\n            padding: 0.5em 0.7em;\n            background-color: rgb(64, 169, 243);\n            color: white;\n            border: 2px solid rgb(102, 185, 244);\n            border-radius: 4px;\n            outline: none;\n        }\n        button:hover {\n            background-color: rgb(102, 185, 244);\n        }\n      &lt;/style>\n      &lt;button>我是一个按钮&lt;/button>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> templateEl<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样做的好处就是不再依赖于html中的template元素了。只需要引入一个js文件，就可以使用自定义的标签。这样很棒，但是同时也会带来问题，比如字符串内的元素和样式都无法使用代码高亮和关键字提示补全。唯一可以正常使用的就是web storm。</p>\n<h4>Shadow DOM 影子元素</h4>\n<h5>隔离样式</h5>\n<p>由于这样直接innerHTML会让自定义元素内的style和外部的style混淆，发生覆盖或者污染。使用Shadow元素，可以将自定义元素内的style样式与外部隔离开。</p>\n<h5>元素隔离</h5>\n<p>shadow元素另一个重要的特性是可以屏蔽外部的JavaScript代码对shadow内部的元素进行操作。</p>\n<p>将IButton类改造成这样。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token punctuation\">:</span> <span class=\"token string\">\"closed\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> templateEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"template\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    templateEl<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n      &lt;style>\n        button {\n            font-weight: 600;\n            padding: 0.5em 0.7em;\n            background-color: rgb(64, 169, 243);\n            color: white;\n            border: 2px solid rgb(102, 185, 244);\n            border-radius: 4px;\n            outline: none;\n        }\n        button:hover {\n            background-color: rgb(102, 185, 244);\n        }\n      &lt;/style>\n      &lt;button>我是一个按钮&lt;/button>\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> templateEl<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Attrbuter参数传递</h4>\n<p>HTML元素的参数只能传递字符串，自定义元素也不例外。</p>\n<p>假设我们例子中的按钮组件可以接受一个字符串作为按钮内部的名字，只需稍加改动，将template中的button改为：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>${this.getAttribute(\"name\")}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>然后在html中加入参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i-button</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>确认<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i-button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>现在的显示效果为：<img src=\"C:%5CUsers%5C15753%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565884772797.png\" alt=\"1565884772797\"></p>\n<p>但我们更习惯这样写：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i-button</span><span class=\"token punctuation\">></span></span>确认<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i-button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这种写法就不能再继续使用getAttribute这个API了。</p>\n<h4>处理子元素</h4>\n<p>我们需要将子元素转换成对应的字符串，嵌入template模板中，来实现渲染效果。</p>\n<p>获取子元素的API有2个，一个是Node.children，另一个是Node.childNodes。这两个API的区别是children只获取节点元素。而childNodes会获取所有的元素。我们明显要使用childrenNodes。</p>\n<p>现在我们在i-button 标签内写东西，是没有效果的，你可以试一下。</p>\n<p>为了实现这个功能，我们将button中的内容替换为this.childNodes。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>${this.childNodes}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这是渲染的结果是这样的：<img src=\"C:%5CUsers%5C15753%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565887260711.png\" alt=\"1565887260711\"></p>\n<p>而期望的结果是这样的：<img src=\"C:%5CUsers%5C15753%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565886567986.png\" alt=\"1565886567986\"></p>\n<p>简单的办法是这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>${this.childNodes[0].textContent}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>但这个做法并没有考虑全面，当这个子元素集合不止一个子元素时，我们可能需要渲染多个子元素。</p>\n<p>当然在button中我们并不推荐嵌套太多其它元素，但可能会有这种情况，比如嵌套一个i标签。</p>\n<p>我们需要处理一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> childEls <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">map</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">,</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> el<span class=\"token punctuation\">.</span>outerHTML<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> el<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>nodeType的类型有很多，但这里对我们有意义的只有1和3。</p>\n<p>1代表元素节点，3代表文本节点。利用outerHTML和textContent分别将元素节点和文本节点转换成字符串。再利用join将它们拼接起来，再把childEls放到button中就大功告成了。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>${childEls}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>比如props的问题</p>\n<p>全局共享状态</p>","id":"f8eb3c4a-892b-5b16-aa51-a75609a722c6","frontmatter":{"date":"2019年8月14日","title":"Web Components实战 一","description":"Web Components已经诞生很久，一直没有得到广泛的应用。其实，WebComponents已经可以在实际项目中使用。"},"fields":{"slug":"/web-components-actual-combat-1/"}}},{"node":{"html":"<h1>盒样式</h1>\n<h3>1 背景色及不透明设置</h3>\n<p>添加背景色的方式通常是：<code class=\"language-text\">background-color: #black;</code></p>\n<p>也可以使用缩写：<code class=\"language-text\">background: #black;</code></p>\n<p>这两者的区别在于，<code class=\"language-text\">background</code>是缩写，只设置颜色一个属性，会导致其他属性的重置。使用时要谨慎。</p>\n<h4>1.1 背景色的单位</h4>\n<p>背景色的单位有3种。</p>\n<p>第1种，固定属性，如<code class=\"language-text\">red</code>、<code class=\"language-text\">white</code>、<code class=\"language-text\">pink</code>、<code class=\"language-text\">black</code>、<code class=\"language-text\">grey</code>等。</p>\n<p>第2种，16进制颜色值，如<code class=\"language-text\">#000000</code>、<code class=\"language-text\">#FFFFFF</code>等。</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.a</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>背景图片及不同的图片格式</h5>\n<h5>calc函数对长度进行数学计算</h5>\n<h5>盒阴影效果</h5>\n<h5>边框效果</h5>\n<h5>渐变</h5>\n<h5>图片及其它嵌入对象的大小</h5>","id":"e3db2fde-71ab-5015-81e1-e5bc2ca3165b","frontmatter":{"date":"2019年8月13日","title":"CSS高手进阶 盒样式","description":"CSS是一门严重被低估的语言，在RedMonk编程语言2019年第三季度排名中位列第7位。CSS一直都是存在感不强，但应用范围极其广泛的语言。在现在，你所看到的任何网页，几乎都有CSS的存在。"},"fields":{"slug":"/CSS/"}}},{"node":{"html":"<h3>hi</h3>\n<p>这是一段<code class=\"language-text\">JavaScript</code>代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","id":"00139e93-0ae4-5f89-8af6-c583567ca488","frontmatter":{"date":"2019年08月12日","title":"JavaScript继承详解","description":"面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性"},"fields":{"slug":"/JavaScriptExtends/"}}},{"node":{"html":"<h3>hi</h3>\n<p>这是一段2<code class=\"language-text\">JavaScript</code>代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","id":"8c5556b6-50e5-5f9b-945d-7a3323c2335d","frontmatter":{"date":"2019年08月12日","title":"JavaScript2继承详解","description":"面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性面向对象是软件编程中的重要特性"},"fields":{"slug":"/JavaScriptExtends2/"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}